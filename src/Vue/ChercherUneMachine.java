/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vue;

import ConnectionBD.ConnectionBD;
import Controleur.Controleur;
import Models.Salle;
import Models.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author sebas
 */
public class ChercherUneMachine extends javax.swing.JFrame {
    private User etudiant;
    /**
     * Creates new form ChercherUneMachine
     */
    public ChercherUneMachine() {
        initComponents();
       // remplirCBHeureDeb(jCBHeureDeb);
       // remplirCBHeureDeb(jCBHeureFin);
    }
      public ChercherUneMachine(User etudiant) {
        initComponents();
        //remplirCBHeureDeb(jCBHeureDeb);
        //remplirCBHeureDeb(jCBHeureFin);
        this.etudiant=etudiant;
    }
    
    
   
    
    /*private void remplirCBHeureDeb(JComboBox<String> comboBoxARemplir){
                comboBoxARemplir.addItem("8:00"); 
                comboBoxARemplir.addItem("9:30"); 
                comboBoxARemplir.addItem("11:00"); 
                comboBoxARemplir.addItem("12:30"); 
                comboBoxARemplir.addItem("14:00"); 
                comboBoxARemplir.addItem("15:30"); 
                comboBoxARemplir.addItem("17:00");
                comboBoxARemplir.addItem("18:30"); 
              
                
             
           
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBtnRecherche = new javax.swing.JButton();
        jLblidEtudiant = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jCBHeureDeb = new javax.swing.JComboBox<>();
        jCBHeureFin = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnRetour = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBtnRecherche.setText("Recherche");
        jBtnRecherche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRechercheActionPerformed(evt);
            }
        });

        jCBHeureDeb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "09:30", "11:00", "12:30", "14:00", "15:30", "17:00", "18:30" }));

        jCBHeureFin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:30", "11:00", "12:30", "14:00", "15:30", "17:00", "18:30", "20:00" }));

        jLabel1.setText("Date réservation");

        jLabel2.setText("Heure début réservation ");

        jLabel3.setText("Heure fin réservation ");

        btnRetour.setText("Retour");
        btnRetour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetourActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBtnRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLblidEtudiant, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(btnRetour, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(19, 19, 19))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(jCBHeureFin, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCBHeureDeb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCBHeureDeb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLblidEtudiant))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jCBHeureFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnRecherche)
                    .addComponent(btnRetour))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnRechercheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRechercheActionPerformed
        try {
            
            
            Date dateSaisie = jDateChooser1.getDate();
            //Transformer Date Saisie en SQL
            long d = dateSaisie.getTime();
            java.sql.Date dateSql = new java.sql.Date(d);
            String dateSaisieString = dateSql.toString();
            
            String heureDeb = (String) jCBHeureDeb.getSelectedItem();
            String heureFin = (String) jCBHeureFin.getSelectedItem();
            //String idE = "21711382";
            String idE = etudiant.getIdentifiantUser();
            
    //Avant de passer à insérer la réservation, regarder si l'étudiant a cours dans une salle TP à l'heure et date indiquée sur l'interface
    //S'il y a TP à cette heure et date, alors plus tard on lui proposerai une machine de la salle de son TP.
            String idS = Controleur.SallesReserveesPourGroupe(idE, dateSaisieString, heureDeb, heureFin);           
            
            //Si l'etudiant a cours alors...
            //Sinon on lui laisse choisir la salle lui même. On montre l'interface avec la liste de salles 
            if (idS!=null){
            //regarder si il a déjà des réservations à cette heure, dans n'importe quelle salle
            //L'idée c'est de ne pas faire une deuxième réservation dans la même salle 
            // ou de lui indiquer d'annuler d'autres réservations qu'il ait pu faire dans une autre salle à l'heure et date de son TP
            //récupérer la machine (si il y en a) où il peut avoir une réservation.   
            String machine = Controleur.MachineReserveeParEtudiant(idE, dateSaisieString, heureDeb, heureFin);
            //Si y en a
            //vérifier si la machine appartient à la salle où l'étudiant a cours.
            //Si oui c'est alors parce qu'il y a déjà une réservation dans son salle TP. On l'informe à l'utilisateur
            //sinon on fait la réservation. (Attention: il faut gérer plus tard le cas où il a déjà de réservations mais dans une autre salle!!
            
           //s'il n' y a pas de machine du tout resérvée. On fait la réservation dans la salle où il a le TP
                if (machine!=null){
                    //S'il y a une réservation à cette heure et date, regarder si la machine se trouve dans la même salle
                    Salle salle = Controleur.RetrouverSalle(machine);
                    if(salle.getNumeroSalle().equals(idS)){
                        
                        JOptionPane.showMessageDialog(null, "La machine "+machine+" dans votre salle TP "+idS+" est déjà réservée. Tout est bien alors pas besoin de réserver");
                    }
                    else {
                        JOptionPane.showMessageDialog(null, "vous avez déjà une réservation dans la salle "+salle.getNumeroSalle()+" pour la machine "+machine+"");
                       JOptionPane.showMessageDialog(null, "Néamoins nous ferons une autre réservation pour vous dans votre salle TP "+idS+". N'oublie pas d'annuler!");
                       Controleur.faireUneReservation(idE, machine, dateSaisieString, heureDeb, heureFin);
                    }
                }
                 else {
                    
                //faire reservation dans la salle TP après plusieurs vérifications
                //pour faire la réservation il faut choisir une machine aléatoirement dans la salle TP
                //Regarder d'aboard la liste de machines disponibles dans cette salle à cette heure. Utiliser méthode MachinesLibre
                ArrayList<String> machinesLibre = new ArrayList<>();
                machinesLibre = Controleur.MachinesLibre(idS, dateSaisieString, heureDeb, heureFin);
                //Selection aleatoire parmi la liste de machines disponibles dans la salle
                Random random = new Random();
                Integer aleatoire = random.nextInt(machinesLibre.size()) + 1;
                String idMDisponible = machinesLibre.get(aleatoire);
                
                Controleur.faireUneReservation(idE, idMDisponible, dateSaisieString, heureDeb, heureFin); 
                JOptionPane.showMessageDialog(null, "La reservation pour votre TP a été faite. Salle"+idS+" machine "+idMDisponible+"");          
                    }               
            }
            //Si l'étudiant n'a pas cours à la date et l'heure indiqué
            else {
                //vérifier s'il y a une réservation déjà faite à l'heure et date indiquée
                  String machine = Controleur.MachineReserveeParEtudiant(idE, dateSaisieString, heureDeb, heureFin);
                  if (machine!=null){
                      Salle salle = Controleur.RetrouverSalle(machine);
                      JOptionPane.showMessageDialog(null, "vous avez déjà une réservation dans la salle "+salle.getNumeroSalle()+" pour la machine "+machine+" au créneau indiqué.");            
                  }
                  else{
                      //l'étudiant n'a pas de réservations dans l'heure et date indiquée et n'a pas TP
                        //Montrer interface avec la liste de salles pour qu'il puisse choisir lui-même 
                        //passer la date, heureDeb et HeureFin selectionné ici
                    //Attention : Vérifier que la salle selectionnée n'est pas réeservé
                        //le système lui proposera une machine aléatoirement de la salle chosie selectionnée, si la salle n'est pas déjà réservée
                     // FaireUneReservation.setVisible
                     
                     FaireUneReservation addPage=new FaireUneReservation(etudiant,heureDeb,heureFin,dateSaisieString);
                    addPage.setVisible(true);
        
              //Passer date et heure à la page suivant pour faire la réservation à partir du choix d'une salle
               /*FaireUneReservation.jLblDate.setText(dateSaisieString);
               FaireUneReservation.jLblHeureDeb.setText(heureDeb);
               FaireUneReservation.jLblHeureFin.setText(heureFin);
     */
                this.hide();
                  }

          
            }
            
            
            
            
            
        } catch (Exception ex) {
            Logger.getLogger(ChercherUneMachine.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jBtnRechercheActionPerformed

    private void btnRetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetourActionPerformed
        // TODO add your handling code here:
        AccueilEtudiants aEtudiant = new AccueilEtudiants(etudiant);
        aEtudiant.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRetourActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChercherUneMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChercherUneMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChercherUneMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChercherUneMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChercherUneMachine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRetour;
    private javax.swing.JButton jBtnRecherche;
    private javax.swing.JComboBox<String> jCBHeureDeb;
    private javax.swing.JComboBox<String> jCBHeureFin;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLblidEtudiant;
    // End of variables declaration//GEN-END:variables
}
